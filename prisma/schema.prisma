// AI创意调研平台数据库模�?- 生产级增强版
// 支持用户管理、创意提交、调研指导、竞价系统、积分系统等核心功能

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
  engineType    = "library"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户�?
model User {
  id           String  @id @default(cuid())
  email        String  @unique
  username     String  @unique
  passwordHash String  @map("password_hash")
  firstName    String? @map("first_name")
  lastName     String? @map("last_name")
  phone        String? @unique
  avatar       String?
  bio          String?

  // 用户状�?
  status          UserStatus @default(ACTIVE)
  role            UserRole   @default(USER)
  isEmailVerified Boolean    @default(false) @map("is_email_verified")
  isPhoneVerified Boolean    @default(false) @map("is_phone_verified")

  // 积分和等�?
  credits     Int       @default(1000) // 注册赠�?000积分
  level       UserLevel @default(BRONZE)
  totalSpent  Int       @default(0) @map("total_spent")
  totalEarned Int       @default(0) @map("total_earned")

  // 竞价相关统计 - 新增
  totalGuesses       Int     @default(0) @map("total_guesses")
  guessAccuracy      Float   @default(0) @map("guess_accuracy")
  guessEarnings      Int     @default(0) @map("guess_earnings")
  guessLevel         Int     @default(1) @map("guess_level")
  levelProgress      Float   @default(0) @map("level_progress")
  consecutiveGuesses Int     @default(0) @map("consecutive_guesses")
  bestStreak         Int     @default(0) @map("best_streak")
  favoriteAgent      String? @map("favorite_agent")

  // 通知设置
  emailNotifications Boolean @default(true) @map("email_notifications")
  marketingEmails    Boolean @default(false) @map("marketing_emails")

  // 时间�?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  lastLoginAt DateTime? @map("last_login_at")

  // 关联关系
  ideas              Idea[]
  researchReports    ResearchReport[]
  creditTransactions CreditTransaction[]
  payments           Payment[]
  sessions           UserSession[]
  refreshTokens      RefreshToken[]
  files              File[]
  discussions        IdeaDiscussion[]
  orders             Order[]
  cartItems          CartItem[]
  biddingSessions    BiddingSession[] // 新增
  priceGuesses       PriceGuess[] // 新增
  biddingBehaviors   UserBiddingBehavior[] // 新增
  achievements       UserAchievement[] // 新增

  @@map("users")
}

// 用户状态枚�?
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
}

// 用户角色枚举
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

// 用户等级枚举
enum UserLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

// 用户会话�?
model UserSession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// 刷新令牌�?
model RefreshToken {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// 创意�?
model Idea {
  id          String       @id @default(cuid())
  title       String
  description String
  category    IdeaCategory
  tags        String       @default("") // 标签，用逗号分隔

  // 提交者信�?
  userId      String  @map("user_id")
  isAnonymous Boolean @default(false) @map("is_anonymous")

  // 状态管�?
  status     IdeaStatus     @default(PENDING)
  visibility IdeaVisibility @default(PUBLIC)

  // 统计数据
  viewCount Int @default(0) @map("view_count")
  likeCount Int @default(0) @map("like_count")

  // 时间�?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联关系
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  researchReports ResearchReport[]
  discussions     IdeaDiscussion[]
  biddingSessions BiddingSession[] // 新增

  @@map("ideas")
}

// 创意分类枚举
enum IdeaCategory {
  TECH
  LIFESTYLE
  EDUCATION
  HEALTH
  FINANCE
  ENTERTAINMENT
  BUSINESS
  RETAIL
  OTHER
}

// 创意状态枚�?
enum IdeaStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

// 创意可见性枚�?
enum IdeaVisibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

// ==================== 竞价系统核心�?====================

// 竞价会话�?- 生产级增强版
model BiddingSession {
  id              String  @id @default(cuid())
  ideaId          String  @map("idea_id")
  userId          String? @map("user_id") // 会话发起�?
  startPrice      Int     @default(50) @map("start_price")
  currentHigh     Int     @default(50) @map("current_high")
  winnerAgent     String? @map("winner_agent")
  winnerAgentType String? @map("winner_agent_type")
  finalPrice      Int?    @map("final_price")

  // 会话状态和阶段
  status BiddingStatus @default(PENDING)
  phase  BiddingPhase  @default(DISCUSSION)

  // 讨论增强相关
  enhancedByDiscussion Boolean @default(false) @map("enhanced_by_discussion")
  discussionId         String? @map("discussion_id")
  enhancementScore     Float   @default(0.0) @map("enhancement_score")

  // 参与统计
  participantCount  Int @default(0) @map("participant_count")
  viewerCount       Int @default(0) @map("viewer_count")
  maxViewerCount    Int @default(0) @map("max_viewer_count")
  totalInteractions Int @default(0) @map("total_interactions")

  // 时间控制
  durationSeconds    Int @default(900) @map("duration_seconds") // 15分钟
  discussionDuration Int @default(600) @map("discussion_duration") // 10分钟
  biddingDuration    Int @default(900) @map("bidding_duration") // 15分钟

  // 时间�?
  startedAt           DateTime? @map("started_at")
  endedAt             DateTime? @map("ended_at")
  discussionStartedAt DateTime? @map("discussion_started_at")
  biddingStartedAt    DateTime? @map("bidding_started_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // 性能和质量指�?
  avgResponseTime     Float @default(0) @map("avg_response_time")
  aiServiceCost       Float @default(0) @map("ai_service_cost")
  userEngagementScore Float @default(0) @map("user_engagement_score")
  contentQualityScore Float @default(0) @map("content_quality_score")

  // 关联关系
  idea         Idea                  @relation(fields: [ideaId], references: [id])
  user         User?                 @relation(fields: [userId], references: [id])
  discussion   IdeaDiscussion?       @relation("IdeaDiscussionBidding", fields: [discussionId], references: [id])
  bids         Bid[]
  priceGuesses PriceGuess[]
  interactions AIInteraction[]
  behaviors    UserBiddingBehavior[]

  @@index([status, createdAt])
  @@index([ideaId, status])
  @@index([userId, status])
  @@map("bidding_sessions")
}

// 竞价状态枚�?
enum BiddingStatus {
  PENDING // 等待开�?
  ACTIVE // 进行�?
  ENDED // 已结�?
  CANCELLED // 已取�?
  FAILED // 失败
}

// 竞价阶段枚举
enum BiddingPhase {
  DISCUSSION // 讨论阶段
  BIDDING // 竞价阶段
  RESULTS // 结果阶段
}

// AI出价记录�?- 生产级增强版
model Bid {
  id         String  @id @default(cuid())
  sessionId  String  @map("session_id")
  agentName  String  @map("agent_name")
  agentType  String  @map("agent_type")
  amount     Int
  comment    String?
  confidence Float?

  // AI决策数据
  analysisData   Json?   @map("analysis_data")
  reasoning      String? // 出价理由
  emotionalState String  @default("neutral") @map("emotional_state")

  // 生成相关
  isScripted     Boolean @default(true) @map("is_scripted")
  aiServiceUsed  String? @map("ai_service_used")
  generationCost Float   @default(0) @map("generation_cost")
  responseTimeMs Int     @default(0) @map("response_time_ms")
  qualityScore   Float   @default(0) @map("quality_score")

  // 理解深度（讨论增强相关）
  understandingDepth Float @default(0.5) @map("understanding_depth")
  contextRichness    Float @default(0.5) @map("context_richness")

  createdAt DateTime @default(now()) @map("created_at")

  session BiddingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@index([agentName, createdAt])
  @@map("bids")
}

// 用户价格竞猜�?- 生产级增强版
model PriceGuess {
  id           String @id @default(cuid())
  sessionId    String @map("session_id")
  userId       String @map("user_id")
  guessedPrice Int    @map("guessed_price")
  confidence   Float
  stakeAmount  Int    @default(10) @map("stake_amount")

  // 结果和奖�?
  actualPrice Int?   @map("actual_price")
  accuracy    Float? // 准确度百分比
  reward      Int? // 获得的奖励积�?

  // 增强信息
  basedOnDiscussion         Boolean @default(false) @map("based_on_discussion")
  predictionConfidenceBonus Float   @default(0.0) @map("prediction_confidence_bonus")

  // 用户行为数据
  timeSpentMs     Int? @map("time_spent_ms")
  adjustmentCount Int  @default(0) @map("adjustment_count")

  createdAt DateTime @default(now()) @map("created_at")

  session BiddingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@index([userId, createdAt])
  @@map("price_guesses")
}

// AI交流记录�?- 生产级增强版
model AIInteraction {
  id        String @id @default(cuid())
  sessionId String @map("session_id")
  agentName String @map("agent_name")
  agentType String @map("agent_type")

  // 交互分类
  interactionType AIInteractionType @map("interaction_type")
  phase           String // 所属阶�?

  // 内容和表�?
  content   String
  emotion   String @default("neutral")
  animation String @default("none")

  // 生成和质量控�?
  isScripted     Boolean @default(true) @map("is_scripted")
  aiServiceUsed  String? @map("ai_service_used")
  generationCost Float   @default(0) @map("generation_cost")
  responseTimeMs Int     @default(0) @map("response_time_ms")
  qualityScore   Float   @default(0) @map("quality_score")

  // 用户反应统计
  userReactions   Json  @default("{}") @map("user_reactions")
  engagementScore Float @default(0) @map("engagement_score")

  // 特殊事件
  isRandomEvent Boolean @default(false) @map("is_random_event")
  eventType     String? @map("event_type")

  createdAt DateTime @default(now()) @map("created_at")

  session BiddingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@index([agentName, createdAt])
  @@map("ai_interactions")
}

// AI交互类型枚举
enum AIInteractionType {
  opening // 开场分�?
  bid_reaction // 出价反应
  psychology // 心理�?
  result // 结果点评
  glitch // 故障事件
  mimicry // 模仿游戏
  conflict // 冲突对话
  alliance // 联盟形成
  breakdown // 人设崩坏
  user_response // 用户互动回应
}

// 用户竞价行为追踪�?- 新增
model UserBiddingBehavior {
  id         String            @id @default(cuid())
  sessionId  String            @map("session_id")
  userId     String            @map("user_id")
  actionType UserBiddingAction @map("action_type")
  actionData Json?             @map("action_data")
  timestamp  DateTime          @default(now())

  // 行为上下�?
  phase     String? // 发生在哪个阶�?
  agentName String? @map("agent_name") // 相关的AI

  session BiddingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId, timestamp])
  @@index([userId, timestamp])
  @@map("user_bidding_behaviors")
}

// 用户竞价行为枚举
enum UserBiddingAction {
  enter_session // 进入会话
  leave_session // 离开会话
  support_agent // 支持某个AI
  react_to_dialogue // 对对话做出反�?
  submit_guess // 提交价格预测
  adjust_guess // 调整预测
  share_session // 分享会话
  report_issue // 报告问题
}

// AI服务使用统计�?- 新增
model AIServiceUsage {
  id          String  @id @default(cuid())
  sessionId   String? @map("session_id")
  agentName   String? @map("agent_name")
  serviceName String  @map("service_name") // deepseek, zhipu, etc.
  modelName   String? @map("model_name")

  // 使用量统�?
  promptTokens     Int @map("prompt_tokens")
  completionTokens Int @map("completion_tokens")
  totalTokens      Int @map("total_tokens")
  requestCount     Int @default(1) @map("request_count")

  // 成本和性能
  totalCost      Float @map("total_cost")
  responseTimeMs Int   @map("response_time_ms")

  // 质量评估
  qualityRating    Float? @map("quality_rating")
  userSatisfaction Float? @map("user_satisfaction")

  // 错误和重�?
  errorCount Int @default(0) @map("error_count")
  retryCount Int @default(0) @map("retry_count")

  createdAt DateTime @default(now()) @map("created_at")
  date      DateTime @default(now()) // 按天统计

  @@index([serviceName, date])
  @@index([sessionId, createdAt])
  @@map("ai_service_usage")
}

// 用户成就�?- 新增
model UserAchievement {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  achievementId   String   @map("achievement_id")
  achievementName String   @map("achievement_name")
  description     String
  category        String
  bonusPoints     Int      @map("bonus_points")
  earnedAt        DateTime @default(now()) @map("earned_at")

  // 成就数据
  progressData Json?   @map("progress_data")
  isRare       Boolean @default(false) @map("is_rare")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId, earnedAt])
  @@map("user_achievements")
}

// ==================== 原有业务表继续保�?====================

// 调研报告�?
model ResearchReport {
  id     String @id @default(cuid())
  ideaId String @map("idea_id")
  userId String @map("user_id")

  // 报告内容
  reportData Json    @map("report_data") // 存储完整的调研指导结�?
  summary    String? // 报告摘要

  // AI专家分析结果
  basicAnalysis   Json? @map("basic_analysis") // 基本盘分析结�?
  researchMethods Json? @map("research_methods") // 调研方法指导
  dataSources     Json? @map("data_sources") // 数据源推�?
  mvpGuidance     Json? @map("mvp_guidance") // MVP验证指导
  businessModel   Json? @map("business_model") // 商业模式指导

  // 生成状�?
  status   ReportStatus @default(GENERATING)
  progress Int          @default(0) // 生成进度 0-100

  // 成本信息
  creditsCost Int @map("credits_cost") // 消耗的积分

  // 时间�?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  completedAt DateTime? @map("completed_at")

  // 关联关系
  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("research_reports")
}

// 报告状态枚�?
enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
  CANCELLED
}

// 积分交易�?
model CreditTransaction {
  id     String                @id @default(cuid())
  userId String                @map("user_id")
  amount Int // 正数为收入，负数为支�?
  type   CreditTransactionType

  // 交易详情
  description String?
  relatedId   String? @map("related_id") // 关联的业务ID（如报告ID、支付ID等）

  // 余额快照
  balanceBefore Int @map("balance_before")
  balanceAfter  Int @map("balance_after")

  // 时间�?
  createdAt DateTime @default(now()) @map("created_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

// 积分交易类型枚举
enum CreditTransactionType {
  REGISTER_BONUS // 注册奖励
  PURCHASE // 购买积分
  RESEARCH_COST // 调研指导消费
  REFUND // 退�?
  ADMIN_ADJUSTMENT // 管理员调�?
  WITHDRAW // 提现
}

// 支付�?
model Payment {
  id     String @id @default(cuid())
  userId String @map("user_id")

  // 支付信息
  outTradeNo  String @unique @map("out_trade_no") // 商户订单�?
  amount      Float // 支付金额（元�?
  credits     Int // 对应积分数量
  description String // 支付描述
  currency    String @default("CNY")

  // 支付渠道
  provider        String // 支付提供商（ALIPAY/WECHAT�?
  providerOrderId String? @map("provider_order_id") // 第三方订单号

  // 支付URL和二维码
  payUrl    String? @map("pay_url")
  qrCodeUrl String? @map("qr_code_url")

  // 支付状�?
  status String @default("PENDING") // PENDING/SUCCESS/FAILED/CANCELLED/REFUNDED

  // 时间�?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  paidAt    DateTime? @map("paid_at")
  expiredAt DateTime  @map("expired_at") // 支付过期时间

  // 关联关系
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refunds Refund[]

  @@map("payments")
}

// 退款表
model Refund {
  id        String @id @default(cuid())
  paymentId String @map("payment_id")

  // 退款信�?
  outRefundNo  String @unique @map("out_refund_no") // 商户退款单�?
  refundAmount Float  @map("refund_amount") // 退款金�?
  reason       String // 退款原�?

  // 退款状�?
  status           String  @default("PROCESSING") // PROCESSING/SUCCESS/FAILED
  providerRefundId String? @map("provider_refund_id") // 第三方退款单�?

  // 操作信息
  operatorId String @map("operator_id") // 操作员ID

  // 时间�?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  refundedAt DateTime? @map("refunded_at")

  // 关联关系
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("refunds")
}

// 文件�?
model File {
  id     String @id @default(cuid())
  userId String @map("user_id")

  // 文件信息
  filename     String // 存储的文件名
  originalName String @map("original_name") // 原始文件�?
  key          String @unique // OSS存储key
  url          String // 访问URL
  size         Int // 文件大小（字节）
  contentType  String @map("content_type") // MIME类型

  // 文件分类
  type   String @default("OTHER") // IMAGE/DOCUMENT/AVATAR/REPORT/OTHER
  status String @default("UPLOADED") // UPLOADING/UPLOADED/FAILED/DELETED

  // 元数�?
  metadata Json? // 存储额外信息（如图片尺寸、处理参数等�?

  // 时间�?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

// 系统配置�?
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("system_configs")
}

// AI服务使用统计�?
model AIUsageStats {
  id           String   @id @default(cuid())
  provider     String // AI服务提供商（百度、阿里、讯飞等�?
  model        String // 模型名称
  requestCount Int      @default(0) @map("request_count")
  totalTokens  Int      @default(0) @map("total_tokens")
  totalCost    Float    @default(0) @map("total_cost")
  date         DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([provider, model, date])
  @@map("ai_usage_stats")
}

// 创意讨论会话�?
model IdeaDiscussion {
  id     String @id @default(cuid())
  ideaId String @map("idea_id")
  userId String @map("user_id")

  // 讨论状�?
  status       DiscussionStatus @default(ACTIVE)
  currentRound Int              @default(1) @map("current_round") // 当前轮数 1-3
  totalRounds  Int              @default(3) @map("total_rounds") // 总轮数限�?

  // AI Agent信息
  aiAgentType String @map("ai_agent_type") // 分配的AI专家类型
  aiAgentName String @map("ai_agent_name") // AI专家名称

  // 时间�?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  completedAt DateTime? @map("completed_at")

  // 关联关系
  idea            Idea                @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages        DiscussionMessage[]
  biddingSessions BiddingSession[]    @relation("IdeaDiscussionBidding")

  @@map("idea_discussions")
}

// 讨论状态枚�?
enum DiscussionStatus {
  ACTIVE // 进行�?
  COMPLETED // 已完�?
  EXPIRED // 已过�?
  CANCELLED // 已取�?
}

// 讨论消息�?
model DiscussionMessage {
  id           String @id @default(cuid())
  discussionId String @map("discussion_id")

  // 消息内容
  content     String // 消息内容
  messageType MessageType @map("message_type") // 消息类型
  roundNumber Int         @map("round_number") // 所属轮�?

  // 发送者信�?
  senderType SenderType @map("sender_type") // 发送者类�?
  senderName String?    @map("sender_name") // 发送者名�?

  // AI分析结果（仅AI消息有）
  analysisData Json? @map("analysis_data") // AI分析数据
  suggestions  Json? // AI建议

  // 时间�?
  createdAt DateTime @default(now()) @map("created_at")

  // 关联关系
  discussion IdeaDiscussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  @@map("discussion_messages")
}

// 消息类型枚举
enum MessageType {
  INITIAL_ANALYSIS // 初始分析
  CLARIFICATION_REQUEST // 澄清问题
  USER_RESPONSE // 用户回应
  IMPROVEMENT_SUGGESTION // 改进建议
  FINAL_ASSESSMENT // 最终评�?
}

// 发送者类型枚�?
enum SenderType {
  USER // 用户
  AI_AGENT // AI专家
}

// 订单�?
model Order {
  id     String @id @default(cuid())
  userId String @map("user_id")

  // 订单信息
  amount      Float // 订单金额
  currency    String      @default("CNY")
  description String // 订单描述
  status      OrderStatus @default(PENDING)

  // 支付信息
  paymentMethod String? @map("payment_method") // 支付方式
  paymentId     String? @map("payment_id") // 关联支付ID

  // 时间�?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  paidAt    DateTime? @map("paid_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

// 订单状态枚�?
enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

// 购物车表
model CartItem {
  id      String @id @default(cuid())
  userId  String @map("user_id")
  agentId String @map("agent_id") // 关联的AI Agent ID

  // 商品信息
  price    Float? // 价格
  quantity Int    @default(1)

  // 时间�?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

// AI Agent�?
model Agent {
  id          String      @id @default(cuid())
  name        String // Agent名称
  description String // Agent描述
  type        AgentType // Agent类型
  status      AgentStatus @default(ACTIVE)

  // 定价信息
  price   Float? // 价格
  credits Int? // 所需积分

  // 时间�?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("agents")
}

// Agent类型枚举
enum AgentType {
  CREATIVE
  ANALYTICAL
  TECHNICAL
  BUSINESS
  MARKETING
}

// Agent状态枚�?
enum AgentStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}
