generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
  engineType      = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  username             String                @unique
  passwordHash         String                @map("password_hash")
  firstName            String?               @map("first_name")
  lastName             String?               @map("last_name")
  phone                String?               @unique
  avatar               String?
  bio                  String?
  status               UserStatus            @default(ACTIVE)
  role                 UserRole              @default(USER)
  isEmailVerified      Boolean               @default(false) @map("is_email_verified")
  isPhoneVerified      Boolean               @default(false) @map("is_phone_verified")
  credits              Int                   @default(1000)
  level                UserLevel             @default(BRONZE)
  totalSpent           Int                   @default(0) @map("total_spent")
  totalEarned          Int                   @default(0) @map("total_earned")
  totalGuesses         Int                   @default(0) @map("total_guesses")
  guessAccuracy        Float                 @default(0) @map("guess_accuracy")
  guessEarnings        Int                   @default(0) @map("guess_earnings")
  guessLevel           Int                   @default(1) @map("guess_level")
  levelProgress        Float                 @default(0) @map("level_progress")
  consecutiveGuesses   Int                   @default(0) @map("consecutive_guesses")
  bestStreak           Int                   @default(0) @map("best_streak")
  favoriteAgent        String?               @map("favorite_agent")
  emailNotifications   Boolean               @default(true) @map("email_notifications")
  marketingEmails      Boolean               @default(false) @map("marketing_emails")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  lastLoginAt          DateTime?             @map("last_login_at")
  biddingSessions      BiddingSession[]
  businessPlanReports  BusinessPlanReport[]
  businessPlanSessions BusinessPlanSession[]
  cartItems            CartItem[]
  creditTransactions   CreditTransaction[]
  files                File[]
  discussions          IdeaDiscussion[]
  ideas                Idea[]
  orders               Order[]
  payments             Payment[]
  priceGuesses         PriceGuess[]
  refreshTokens        RefreshToken[]
  researchReports      ResearchReport[]
  achievements         UserAchievement[]
  biddingBehaviors     UserBiddingBehavior[]
  sessions             UserSession[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Idea {
  id              String           @id @default(cuid())
  title           String
  description     String
  category        IdeaCategory
  tags            String           @default("")
  userId          String           @map("user_id")
  isAnonymous     Boolean          @default(false) @map("is_anonymous")
  status          IdeaStatus       @default(PENDING)
  visibility      IdeaVisibility   @default(PUBLIC)
  viewCount       Int              @default(0) @map("view_count")
  likeCount       Int              @default(0) @map("like_count")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  biddingSessions BiddingSession[]
  discussions     IdeaDiscussion[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  researchReports ResearchReport[]

  @@map("ideas")
}

model BiddingSession {
  id                   String                @id @default(cuid())
  ideaId               String                @map("idea_id")
  userId               String?               @map("user_id")
  startPrice           Int                   @default(50) @map("start_price")
  currentHigh          Int                   @default(50) @map("current_high")
  winnerAgent          String?               @map("winner_agent")
  winnerAgentType      String?               @map("winner_agent_type")
  finalPrice           Int?                  @map("final_price")
  status               BiddingStatus         @default(PENDING)
  phase                BiddingPhase          @default(DISCUSSION)
  enhancedByDiscussion Boolean               @default(false) @map("enhanced_by_discussion")
  discussionId         String?               @map("discussion_id")
  enhancementScore     Float                 @default(0.0) @map("enhancement_score")
  participantCount     Int                   @default(0) @map("participant_count")
  viewerCount          Int                   @default(0) @map("viewer_count")
  maxViewerCount       Int                   @default(0) @map("max_viewer_count")
  totalInteractions    Int                   @default(0) @map("total_interactions")
  durationSeconds      Int                   @default(900) @map("duration_seconds")
  discussionDuration   Int                   @default(600) @map("discussion_duration")
  biddingDuration      Int                   @default(900) @map("bidding_duration")
  startedAt            DateTime?             @map("started_at")
  endedAt              DateTime?             @map("ended_at")
  discussionStartedAt  DateTime?             @map("discussion_started_at")
  biddingStartedAt     DateTime?             @map("bidding_started_at")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  avgResponseTime      Float                 @default(0) @map("avg_response_time")
  aiServiceCost        Float                 @default(0) @map("ai_service_cost")
  userEngagementScore  Float                 @default(0) @map("user_engagement_score")
  contentQualityScore  Float                 @default(0) @map("content_quality_score")
  interactions         AIInteraction[]
  discussion           IdeaDiscussion?       @relation("IdeaDiscussionBidding", fields: [discussionId], references: [id])
  idea                 Idea                  @relation(fields: [ideaId], references: [id])
  user                 User?                 @relation(fields: [userId], references: [id])
  bids                 Bid[]
  priceGuesses         PriceGuess[]
  behaviors            UserBiddingBehavior[]

  @@index([status, createdAt])
  @@index([ideaId, status])
  @@index([userId, status])
  @@map("bidding_sessions")
}

model Bid {
  id                 String         @id @default(cuid())
  sessionId          String         @map("session_id")
  agentName          String         @map("agent_name")
  agentType          String         @map("agent_type")
  amount             Int
  comment            String?
  confidence         Float?
  analysisData       Json?          @map("analysis_data")
  reasoning          String?
  emotionalState     String         @default("neutral") @map("emotional_state")
  isScripted         Boolean        @default(true) @map("is_scripted")
  aiServiceUsed      String?        @map("ai_service_used")
  generationCost     Float          @default(0) @map("generation_cost")
  responseTimeMs     Int            @default(0) @map("response_time_ms")
  qualityScore       Float          @default(0) @map("quality_score")
  understandingDepth Float          @default(0.5) @map("understanding_depth")
  contextRichness    Float          @default(0.5) @map("context_richness")
  createdAt          DateTime       @default(now()) @map("created_at")
  session            BiddingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@index([agentName, createdAt])
  @@map("bids")
}

model PriceGuess {
  id                        String         @id @default(cuid())
  sessionId                 String         @map("session_id")
  userId                    String         @map("user_id")
  guessedPrice              Int            @map("guessed_price")
  confidence                Float
  stakeAmount               Int            @default(10) @map("stake_amount")
  actualPrice               Int?           @map("actual_price")
  accuracy                  Float?
  reward                    Int?
  basedOnDiscussion         Boolean        @default(false) @map("based_on_discussion")
  predictionConfidenceBonus Float          @default(0.0) @map("prediction_confidence_bonus")
  timeSpentMs               Int?           @map("time_spent_ms")
  adjustmentCount           Int            @default(0) @map("adjustment_count")
  createdAt                 DateTime       @default(now()) @map("created_at")
  session                   BiddingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user                      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@index([userId, createdAt])
  @@map("price_guesses")
}

model AIInteraction {
  id              String            @id @default(cuid())
  sessionId       String            @map("session_id")
  agentName       String            @map("agent_name")
  agentType       String            @map("agent_type")
  interactionType AIInteractionType @map("interaction_type")
  phase           String
  content         String
  emotion         String            @default("neutral")
  animation       String            @default("none")
  isScripted      Boolean           @default(true) @map("is_scripted")
  aiServiceUsed   String?           @map("ai_service_used")
  generationCost  Float             @default(0) @map("generation_cost")
  responseTimeMs  Int               @default(0) @map("response_time_ms")
  qualityScore    Float             @default(0) @map("quality_score")
  userReactions   Json              @default("{}") @map("user_reactions")
  engagementScore Float             @default(0) @map("engagement_score")
  isRandomEvent   Boolean           @default(false) @map("is_random_event")
  eventType       String?           @map("event_type")
  createdAt       DateTime          @default(now()) @map("created_at")
  session         BiddingSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@index([agentName, createdAt])
  @@map("ai_interactions")
}

model UserBiddingBehavior {
  id         String            @id @default(cuid())
  sessionId  String            @map("session_id")
  userId     String            @map("user_id")
  actionType UserBiddingAction @map("action_type")
  actionData Json?             @map("action_data")
  timestamp  DateTime          @default(now())
  phase      String?
  agentName  String?           @map("agent_name")
  session    BiddingSession    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId, timestamp])
  @@index([userId, timestamp])
  @@map("user_bidding_behaviors")
}

model AIServiceUsage {
  id               String   @id @default(cuid())
  sessionId        String?  @map("session_id")
  agentName        String?  @map("agent_name")
  serviceName      String   @map("service_name")
  modelName        String?  @map("model_name")
  promptTokens     Int      @map("prompt_tokens")
  completionTokens Int      @map("completion_tokens")
  totalTokens      Int      @map("total_tokens")
  requestCount     Int      @default(1) @map("request_count")
  totalCost        Float    @map("total_cost")
  responseTimeMs   Int      @map("response_time_ms")
  qualityRating    Float?   @map("quality_rating")
  userSatisfaction Float?   @map("user_satisfaction")
  errorCount       Int      @default(0) @map("error_count")
  retryCount       Int      @default(0) @map("retry_count")
  createdAt        DateTime @default(now()) @map("created_at")
  date             DateTime @default(now())

  @@index([serviceName, date])
  @@index([sessionId, createdAt])
  @@map("ai_service_usage")
}

model UserAchievement {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  achievementId   String   @map("achievement_id")
  achievementName String   @map("achievement_name")
  description     String
  category        String
  bonusPoints     Int      @map("bonus_points")
  earnedAt        DateTime @default(now()) @map("earned_at")
  progressData    Json?    @map("progress_data")
  isRare          Boolean  @default(false) @map("is_rare")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId, earnedAt])
  @@map("user_achievements")
}

model ResearchReport {
  id              String       @id @default(cuid())
  ideaId          String       @map("idea_id")
  userId          String       @map("user_id")
  reportData      Json         @map("report_data")
  summary         String?
  basicAnalysis   Json?        @map("basic_analysis")
  researchMethods Json?        @map("research_methods")
  dataSources     Json?        @map("data_sources")
  mvpGuidance     Json?        @map("mvp_guidance")
  businessModel   Json?        @map("business_model")
  status          ReportStatus @default(GENERATING)
  progress        Int          @default(0)
  creditsCost     Int          @map("credits_cost")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  completedAt     DateTime?    @map("completed_at")
  idea            Idea         @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("research_reports")
}

model CreditTransaction {
  id            String                @id @default(cuid())
  userId        String                @map("user_id")
  amount        Int
  type          CreditTransactionType
  description   String?
  relatedId     String?               @map("related_id")
  balanceBefore Int                   @map("balance_before")
  balanceAfter  Int                   @map("balance_after")
  createdAt     DateTime              @default(now()) @map("created_at")
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

model Payment {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  outTradeNo      String    @unique @map("out_trade_no")
  amount          Float
  credits         Int
  description     String
  currency        String    @default("CNY")
  provider        String
  providerOrderId String?   @map("provider_order_id")
  payUrl          String?   @map("pay_url")
  qrCodeUrl       String?   @map("qr_code_url")
  status          String    @default("PENDING")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  paidAt          DateTime? @map("paid_at")
  expiredAt       DateTime  @map("expired_at")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refunds         Refund[]

  @@map("payments")
}

model Refund {
  id               String    @id @default(cuid())
  paymentId        String    @map("payment_id")
  outRefundNo      String    @unique @map("out_refund_no")
  refundAmount     Float     @map("refund_amount")
  reason           String
  status           String    @default("PROCESSING")
  providerRefundId String?   @map("provider_refund_id")
  operatorId       String    @map("operator_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  refundedAt       DateTime? @map("refunded_at")
  payment          Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("refunds")
}

model File {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  filename     String
  originalName String    @map("original_name")
  key          String    @unique
  url          String
  size         Int
  contentType  String    @map("content_type")
  type         String    @default("OTHER")
  status       String    @default("UPLOADED")
  metadata     Json?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("system_configs")
}

model AIUsageStats {
  id           String   @id @default(cuid())
  provider     String
  model        String
  requestCount Int      @default(0) @map("request_count")
  totalTokens  Int      @default(0) @map("total_tokens")
  totalCost    Float    @default(0) @map("total_cost")
  date         DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([provider, model, date])
  @@map("ai_usage_stats")
}

model IdeaDiscussion {
  id              String              @id @default(cuid())
  ideaId          String              @map("idea_id")
  userId          String              @map("user_id")
  status          DiscussionStatus    @default(ACTIVE)
  currentRound    Int                 @default(1) @map("current_round")
  totalRounds     Int                 @default(3) @map("total_rounds")
  aiAgentType     String              @map("ai_agent_type")
  aiAgentName     String              @map("ai_agent_name")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  completedAt     DateTime?           @map("completed_at")
  biddingSessions BiddingSession[]    @relation("IdeaDiscussionBidding")
  messages        DiscussionMessage[]
  idea            Idea                @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("idea_discussions")
}

model DiscussionMessage {
  id           String         @id @default(cuid())
  discussionId String         @map("discussion_id")
  content      String
  messageType  MessageType    @map("message_type")
  roundNumber  Int            @map("round_number")
  senderType   SenderType     @map("sender_type")
  senderName   String?        @map("sender_name")
  analysisData Json?          @map("analysis_data")
  suggestions  Json?
  createdAt    DateTime       @default(now()) @map("created_at")
  discussion   IdeaDiscussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  @@map("discussion_messages")
}

model Order {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  amount        Float
  currency      String      @default("CNY")
  description   String
  status        OrderStatus @default(PENDING)
  paymentMethod String?     @map("payment_method")
  paymentId     String?     @map("payment_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  paidAt        DateTime?   @map("paid_at")
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  agentId   String   @map("agent_id")
  price     Float?
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  description String
  type        AgentType
  status      AgentStatus @default(ACTIVE)
  price       Float?
  credits     Int?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("agents")
}

model BusinessPlanSession {
  id           String                    @id @default(cuid())
  userId       String?                   @map("user_id")
  ideaId       String?                   @map("idea_id")
  source       BusinessPlanSource        @default(AI_BIDDING)
  status       BusinessPlanSessionStatus @default(PENDING)
  snapshot     Json
  expiresAt    DateTime?                 @map("expires_at")
  createdAt    DateTime                  @default(now()) @map("created_at")
  updatedAt    DateTime                  @updatedAt @map("updated_at")
  access_token String?                   @unique
  audits       BusinessPlanAudit[]
  reports      BusinessPlanReport[]
  user         User?                     @relation(fields: [userId], references: [id])

  @@map("business_plan_sessions")
}

model BusinessPlanReport {
  id        String              @id @default(cuid())
  sessionId String              @map("session_id")
  userId    String?             @map("user_id")
  guide     Json
  version   Int                 @default(1)
  metadata  Json?
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt @map("updated_at")
  session   BusinessPlanSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User?               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("business_plan_reports")
}

model BusinessPlanAudit {
  id        String              @id @default(cuid())
  sessionId String              @map("session_id")
  action    String
  payload   Json?
  createdBy String?             @map("created_by")
  createdAt DateTime            @default(now()) @map("created_at")
  session   BusinessPlanSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("business_plan_audits")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum UserLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum IdeaCategory {
  TECH
  LIFESTYLE
  EDUCATION
  HEALTH
  FINANCE
  ENTERTAINMENT
  BUSINESS
  RETAIL
  OTHER
}

enum IdeaStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

enum IdeaVisibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum BiddingStatus {
  PENDING
  ACTIVE
  ENDED
  CANCELLED
  FAILED
}

enum BiddingPhase {
  DISCUSSION
  BIDDING
  RESULTS
}

enum AIInteractionType {
  opening
  bid_reaction
  psychology
  result
  glitch
  mimicry
  conflict
  alliance
  breakdown
  user_response
}

enum UserBiddingAction {
  enter_session
  leave_session
  support_agent
  react_to_dialogue
  submit_guess
  adjust_guess
  share_session
  report_issue
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
  CANCELLED
}

enum CreditTransactionType {
  REGISTER_BONUS
  PURCHASE
  RESEARCH_COST
  REFUND
  ADMIN_ADJUSTMENT
  WITHDRAW
  BUSINESS_PLAN_COST
}

enum DiscussionStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
}

enum MessageType {
  INITIAL_ANALYSIS
  CLARIFICATION_REQUEST
  USER_RESPONSE
  IMPROVEMENT_SUGGESTION
  FINAL_ASSESSMENT
}

enum SenderType {
  USER
  AI_AGENT
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum AgentType {
  CREATIVE
  ANALYTICAL
  TECHNICAL
  BUSINESS
  MARKETING
}

enum AgentStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum BusinessPlanSessionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum BusinessPlanSource {
  AI_BIDDING
  MARKETPLACE
  API
  MANUAL
}

// ============================================
// 创意成熟度评估系统 (Creative Maturity Grading)
// Added: 2025-01-09
// Spec: CREATIVE_MATURITY_PLAN_ENHANCED.md v4.1
// ============================================

// 创意成熟度评估结果表
model CreativeMaturityAdvice {
  id                String   @id @default(cuid())
  ideaId            String   @map("idea_id")
  userId            String?  @map("user_id")

  // 评分结果
  maturityScore     Float    @map("maturity_score")      // 1-10
  maturityLevel     String   @map("maturity_level")      // LOW/GRAY_LOW/MEDIUM/GRAY_HIGH/HIGH
  dimensions        Json     @map("dimensions")          // 5维详情
  confidence        Float    @map("confidence")          // 0-1

  // 专家建议
  expertAdvice      Json     @map("expert_advice")       // 按等级分类的建议
  weakDimensions    String[] @map("weak_dimensions")     // 薄弱维度列表

  // 专家共识
  expertConsensus   Json     @map("expert_consensus")    // 专家观点统计

  // The Mom Test信号
  validSignals      Json     @map("valid_signals")       // 有效信号统计
  invalidSignals    Json     @map("invalid_signals")     // 无效信号统计

  // 评分原因
  scoringReasons    Json     @map("scoring_reasons")     // 评分原因块

  // 验证数据(高分创意)
  verificationData  Json?    @map("verification_data")   // 用户填写的验证问卷
  verificationLinks Json?    @map("verification_links")  // 网上检索的参考链接
  verifiedAt        DateTime? @map("verified_at")

  // 元数据
  scoringVersion    String   @map("scoring_version")     // "1.0.0"

  // 时间戳
  createdAt         DateTime @default(now()) @map("created_at")
  expiresAt         DateTime @map("expires_at")          // 默认7天后过期
  extendedUntil     DateTime? @map("extended_until")     // 用户延长至

  @@index([ideaId, createdAt])
  @@index([expiresAt]) // 用于定时清理
  @@map("creative_maturity_advice")
}

// 评分权重配置表
model ScoringWeightConfig {
  id                String   @id @default(cuid())
  version           String   @unique                      // "1.0.0"
  isActive          Boolean  @default(false)             // 是否当前激活
  isCanary          Boolean  @default(false)             // 是否灰度版本
  canaryPercentage  Int      @default(0)                 // 灰度百分比(0-100)

  // 5维权重(总和=1.0)
  targetCustomer    Float    @map("target_customer")      // 0.20
  demandScenario    Float    @map("demand_scenario")      // 0.20
  coreValue         Float    @map("core_value")           // 0.25
  businessModel     Float    @map("business_model")       // 0.20
  credibility       Float    @map("credibility")          // 0.15

  // 阈值配置
  thresholdLowMax   Float    @default(4.0)               // 低分上限
  thresholdMidMin   Float    @default(5.0)               // 中分下限
  thresholdMidMax   Float    @default(7.0)               // 中分上限
  thresholdHighMin  Float    @default(7.5)               // 高分下限

  description       String?                              // 配置说明
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // 标定数据
  calibrationSetSize Int?    @map("calibration_set_size") // 标定集样本数
  calibrationAccuracy Float? @map("calibration_accuracy") // 标定准确率

  @@map("scoring_weight_config")
}

// 验证订单表(用于计费保护)
model VerificationOrder {
  id                String   @id @default(cuid())
  ideaId            String   @map("idea_id")
  userId            String   @map("user_id")
  amount            Int                                  // 积分数量
  status            String                               // PENDING/COMPLETED/FAILED
  error             String?                              // 失败原因
  createdAt         DateTime @default(now()) @map("created_at")
  completedAt       DateTime? @map("completed_at")
  failedAt          DateTime? @map("failed_at")

  @@index([ideaId])
  @@index([userId])
  @@map("verification_order")
}

// 问卷草稿表(支持分段提交)
model QuestionnaireDraft {
  id                String   @id @default(cuid())
  ideaId            String   @map("idea_id")
  userId            String   @map("user_id")
  answers           Json                                 // 已填写的答案
  progress          Float                                // 完成进度(0-1)
  savedAt           DateTime @default(now()) @map("saved_at")
  expiresAt         DateTime @map("expires_at")          // 默认7天后过期

  @@index([ideaId, userId])
  @@index([expiresAt])
  @@map("questionnaire_draft")
}
