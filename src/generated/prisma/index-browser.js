
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  avatar: 'avatar',
  bio: 'bio',
  status: 'status',
  role: 'role',
  isEmailVerified: 'isEmailVerified',
  isPhoneVerified: 'isPhoneVerified',
  credits: 'credits',
  level: 'level',
  totalSpent: 'totalSpent',
  totalEarned: 'totalEarned',
  totalGuesses: 'totalGuesses',
  guessAccuracy: 'guessAccuracy',
  guessEarnings: 'guessEarnings',
  guessLevel: 'guessLevel',
  levelProgress: 'levelProgress',
  consecutiveGuesses: 'consecutiveGuesses',
  bestStreak: 'bestStreak',
  favoriteAgent: 'favoriteAgent',
  emailNotifications: 'emailNotifications',
  marketingEmails: 'marketingEmails',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  isRevoked: 'isRevoked',
  createdAt: 'createdAt'
};

exports.Prisma.IdeaScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  tags: 'tags',
  userId: 'userId',
  isAnonymous: 'isAnonymous',
  status: 'status',
  visibility: 'visibility',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BiddingSessionScalarFieldEnum = {
  id: 'id',
  ideaId: 'ideaId',
  userId: 'userId',
  startPrice: 'startPrice',
  currentHigh: 'currentHigh',
  winnerAgent: 'winnerAgent',
  winnerAgentType: 'winnerAgentType',
  finalPrice: 'finalPrice',
  status: 'status',
  phase: 'phase',
  enhancedByDiscussion: 'enhancedByDiscussion',
  discussionId: 'discussionId',
  enhancementScore: 'enhancementScore',
  participantCount: 'participantCount',
  viewerCount: 'viewerCount',
  maxViewerCount: 'maxViewerCount',
  totalInteractions: 'totalInteractions',
  durationSeconds: 'durationSeconds',
  discussionDuration: 'discussionDuration',
  biddingDuration: 'biddingDuration',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  discussionStartedAt: 'discussionStartedAt',
  biddingStartedAt: 'biddingStartedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  avgResponseTime: 'avgResponseTime',
  aiServiceCost: 'aiServiceCost',
  userEngagementScore: 'userEngagementScore',
  contentQualityScore: 'contentQualityScore'
};

exports.Prisma.BidScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  agentName: 'agentName',
  agentType: 'agentType',
  amount: 'amount',
  comment: 'comment',
  confidence: 'confidence',
  analysisData: 'analysisData',
  reasoning: 'reasoning',
  emotionalState: 'emotionalState',
  isScripted: 'isScripted',
  aiServiceUsed: 'aiServiceUsed',
  generationCost: 'generationCost',
  responseTimeMs: 'responseTimeMs',
  qualityScore: 'qualityScore',
  understandingDepth: 'understandingDepth',
  contextRichness: 'contextRichness',
  createdAt: 'createdAt'
};

exports.Prisma.PriceGuessScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  guessedPrice: 'guessedPrice',
  confidence: 'confidence',
  stakeAmount: 'stakeAmount',
  actualPrice: 'actualPrice',
  accuracy: 'accuracy',
  reward: 'reward',
  basedOnDiscussion: 'basedOnDiscussion',
  predictionConfidenceBonus: 'predictionConfidenceBonus',
  timeSpentMs: 'timeSpentMs',
  adjustmentCount: 'adjustmentCount',
  createdAt: 'createdAt'
};

exports.Prisma.AIInteractionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  agentName: 'agentName',
  agentType: 'agentType',
  interactionType: 'interactionType',
  phase: 'phase',
  content: 'content',
  emotion: 'emotion',
  animation: 'animation',
  isScripted: 'isScripted',
  aiServiceUsed: 'aiServiceUsed',
  generationCost: 'generationCost',
  responseTimeMs: 'responseTimeMs',
  qualityScore: 'qualityScore',
  userReactions: 'userReactions',
  engagementScore: 'engagementScore',
  isRandomEvent: 'isRandomEvent',
  eventType: 'eventType',
  createdAt: 'createdAt'
};

exports.Prisma.UserBiddingBehaviorScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  actionType: 'actionType',
  actionData: 'actionData',
  timestamp: 'timestamp',
  phase: 'phase',
  agentName: 'agentName'
};

exports.Prisma.AIServiceUsageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  agentName: 'agentName',
  serviceName: 'serviceName',
  modelName: 'modelName',
  promptTokens: 'promptTokens',
  completionTokens: 'completionTokens',
  totalTokens: 'totalTokens',
  requestCount: 'requestCount',
  totalCost: 'totalCost',
  responseTimeMs: 'responseTimeMs',
  qualityRating: 'qualityRating',
  userSatisfaction: 'userSatisfaction',
  errorCount: 'errorCount',
  retryCount: 'retryCount',
  createdAt: 'createdAt',
  date: 'date'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  achievementName: 'achievementName',
  description: 'description',
  category: 'category',
  bonusPoints: 'bonusPoints',
  earnedAt: 'earnedAt',
  progressData: 'progressData',
  isRare: 'isRare'
};

exports.Prisma.ResearchReportScalarFieldEnum = {
  id: 'id',
  ideaId: 'ideaId',
  userId: 'userId',
  reportData: 'reportData',
  summary: 'summary',
  basicAnalysis: 'basicAnalysis',
  researchMethods: 'researchMethods',
  dataSources: 'dataSources',
  mvpGuidance: 'mvpGuidance',
  businessModel: 'businessModel',
  status: 'status',
  progress: 'progress',
  creditsCost: 'creditsCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt'
};

exports.Prisma.CreditTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  type: 'type',
  description: 'description',
  relatedId: 'relatedId',
  balanceBefore: 'balanceBefore',
  balanceAfter: 'balanceAfter',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  outTradeNo: 'outTradeNo',
  amount: 'amount',
  credits: 'credits',
  description: 'description',
  currency: 'currency',
  provider: 'provider',
  providerOrderId: 'providerOrderId',
  payUrl: 'payUrl',
  qrCodeUrl: 'qrCodeUrl',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paidAt: 'paidAt',
  expiredAt: 'expiredAt'
};

exports.Prisma.RefundScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  outRefundNo: 'outRefundNo',
  refundAmount: 'refundAmount',
  reason: 'reason',
  status: 'status',
  providerRefundId: 'providerRefundId',
  operatorId: 'operatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  refundedAt: 'refundedAt'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  filename: 'filename',
  originalName: 'originalName',
  key: 'key',
  url: 'url',
  size: 'size',
  contentType: 'contentType',
  type: 'type',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIUsageStatsScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  model: 'model',
  requestCount: 'requestCount',
  totalTokens: 'totalTokens',
  totalCost: 'totalCost',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IdeaDiscussionScalarFieldEnum = {
  id: 'id',
  ideaId: 'ideaId',
  userId: 'userId',
  status: 'status',
  currentRound: 'currentRound',
  totalRounds: 'totalRounds',
  aiAgentType: 'aiAgentType',
  aiAgentName: 'aiAgentName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt'
};

exports.Prisma.DiscussionMessageScalarFieldEnum = {
  id: 'id',
  discussionId: 'discussionId',
  content: 'content',
  messageType: 'messageType',
  roundNumber: 'roundNumber',
  senderType: 'senderType',
  senderName: 'senderName',
  analysisData: 'analysisData',
  suggestions: 'suggestions',
  createdAt: 'createdAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  currency: 'currency',
  description: 'description',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentId: 'paymentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paidAt: 'paidAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  agentId: 'agentId',
  price: 'price',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  status: 'status',
  price: 'price',
  credits: 'credits',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  BANNED: 'BANNED'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR'
};

exports.UserLevel = exports.$Enums.UserLevel = {
  BRONZE: 'BRONZE',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM',
  DIAMOND: 'DIAMOND'
};

exports.IdeaCategory = exports.$Enums.IdeaCategory = {
  TECH: 'TECH',
  LIFESTYLE: 'LIFESTYLE',
  EDUCATION: 'EDUCATION',
  HEALTH: 'HEALTH',
  FINANCE: 'FINANCE',
  ENTERTAINMENT: 'ENTERTAINMENT',
  BUSINESS: 'BUSINESS',
  RETAIL: 'RETAIL',
  OTHER: 'OTHER'
};

exports.IdeaStatus = exports.$Enums.IdeaStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ARCHIVED: 'ARCHIVED'
};

exports.IdeaVisibility = exports.$Enums.IdeaVisibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  UNLISTED: 'UNLISTED'
};

exports.BiddingStatus = exports.$Enums.BiddingStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  ENDED: 'ENDED',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED'
};

exports.BiddingPhase = exports.$Enums.BiddingPhase = {
  DISCUSSION: 'DISCUSSION',
  BIDDING: 'BIDDING',
  RESULTS: 'RESULTS'
};

exports.AIInteractionType = exports.$Enums.AIInteractionType = {
  opening: 'opening',
  bid_reaction: 'bid_reaction',
  psychology: 'psychology',
  result: 'result',
  glitch: 'glitch',
  mimicry: 'mimicry',
  conflict: 'conflict',
  alliance: 'alliance',
  breakdown: 'breakdown',
  user_response: 'user_response'
};

exports.UserBiddingAction = exports.$Enums.UserBiddingAction = {
  enter_session: 'enter_session',
  leave_session: 'leave_session',
  support_agent: 'support_agent',
  react_to_dialogue: 'react_to_dialogue',
  submit_guess: 'submit_guess',
  adjust_guess: 'adjust_guess',
  share_session: 'share_session',
  report_issue: 'report_issue'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  GENERATING: 'GENERATING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.CreditTransactionType = exports.$Enums.CreditTransactionType = {
  REGISTER_BONUS: 'REGISTER_BONUS',
  PURCHASE: 'PURCHASE',
  RESEARCH_COST: 'RESEARCH_COST',
  REFUND: 'REFUND',
  ADMIN_ADJUSTMENT: 'ADMIN_ADJUSTMENT',
  WITHDRAW: 'WITHDRAW'
};

exports.DiscussionStatus = exports.$Enums.DiscussionStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED'
};

exports.MessageType = exports.$Enums.MessageType = {
  INITIAL_ANALYSIS: 'INITIAL_ANALYSIS',
  CLARIFICATION_REQUEST: 'CLARIFICATION_REQUEST',
  USER_RESPONSE: 'USER_RESPONSE',
  IMPROVEMENT_SUGGESTION: 'IMPROVEMENT_SUGGESTION',
  FINAL_ASSESSMENT: 'FINAL_ASSESSMENT'
};

exports.SenderType = exports.$Enums.SenderType = {
  USER: 'USER',
  AI_AGENT: 'AI_AGENT'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.AgentType = exports.$Enums.AgentType = {
  CREATIVE: 'CREATIVE',
  ANALYTICAL: 'ANALYTICAL',
  TECHNICAL: 'TECHNICAL',
  BUSINESS: 'BUSINESS',
  MARKETING: 'MARKETING'
};

exports.AgentStatus = exports.$Enums.AgentStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  MAINTENANCE: 'MAINTENANCE'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserSession: 'UserSession',
  RefreshToken: 'RefreshToken',
  Idea: 'Idea',
  BiddingSession: 'BiddingSession',
  Bid: 'Bid',
  PriceGuess: 'PriceGuess',
  AIInteraction: 'AIInteraction',
  UserBiddingBehavior: 'UserBiddingBehavior',
  AIServiceUsage: 'AIServiceUsage',
  UserAchievement: 'UserAchievement',
  ResearchReport: 'ResearchReport',
  CreditTransaction: 'CreditTransaction',
  Payment: 'Payment',
  Refund: 'Refund',
  File: 'File',
  SystemConfig: 'SystemConfig',
  AIUsageStats: 'AIUsageStats',
  IdeaDiscussion: 'IdeaDiscussion',
  DiscussionMessage: 'DiscussionMessage',
  Order: 'Order',
  CartItem: 'CartItem',
  Agent: 'Agent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
