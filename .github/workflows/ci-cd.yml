# CI/CD部署流水线配置
name: AI创意交易平台 CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  # 代码质量检查
  lint-and-test:
    name: 代码检查和测试
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 安装依赖
      run: npm ci

    - name: 代码格式检查
      run: npm run lint

    - name: TypeScript类型检查
      run: npm run type-check

    - name: 生成Prisma客户端
      run: npx prisma generate

    - name: 运行单元测试
      run: npm run test
      env:
        NODE_ENV: test

    - name: 生成测试覆盖率报告
      run: npm run test:coverage

    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 安装依赖
      run: npm ci

    - name: 运行npm audit
      run: npm audit --audit-level=high

    - name: 运行Snyk安全扫描
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # 构建Docker镜像
  build-image:
    name: 构建Docker镜像
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: 构建并推送Docker镜像
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 输出镜像信息
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # 部署到测试环境
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 部署到阿里云ECS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /opt/ai-marketplace

          # 备份当前版本
          docker-compose down

          # 更新镜像
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker pull ${{ needs.build-image.outputs.image }}

          # 更新环境变量
          cat > .env << EOF
          DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          NEXTAUTH_URL=${{ secrets.STAGING_NEXTAUTH_URL }}
          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
          BAIDU_API_KEY=${{ secrets.BAIDU_API_KEY }}
          BAIDU_SECRET_KEY=${{ secrets.BAIDU_SECRET_KEY }}
          # ... 其他环境变量
          EOF

          # 运行数据库迁移
          docker run --rm --env-file .env ${{ needs.build-image.outputs.image }} npx prisma migrate deploy

          # 启动服务
          docker-compose up -d

          # 健康检查
          sleep 30
          curl -f http://localhost:3000/api/health || exit 1

    - name: 通知部署结果
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          测试环境部署${{ job.status }}
          镜像: ${{ needs.build-image.outputs.image }}
          提交: ${{ github.sha }}

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: build-image
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 部署到生产环境
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          cd /opt/ai-marketplace

          # 创建备份
          ./scripts/backup.sh

          # 蓝绿部署
          ./scripts/blue-green-deploy.sh ${{ needs.build-image.outputs.image }}

          # 验证部署
          ./scripts/health-check.sh

          # 清理旧镜像
          docker image prune -f

    - name: 更新版本标签
      run: |
        echo "部署版本: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "镜像: ${{ needs.build-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "提交: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

    - name: 通知生产部署
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          🚀 生产环境部署${{ job.status }}
          版本: ${{ github.ref_name }}
          镜像: ${{ needs.build-image.outputs.image }}
          提交: ${{ github.sha }}

  # 性能测试
  performance-test:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 安装性能测试工具
      run: |
        npm install -g artillery
        npm install -g lighthouse

    - name: 运行负载测试
      run: |
        artillery run tests/load/api-load-test.yml --target ${{ secrets.STAGING_URL }}

    - name: 运行Lighthouse性能测试
      run: |
        lighthouse ${{ secrets.STAGING_URL }} --output json --output-path ./lighthouse-report.json

    - name: 上传性能测试报告
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          artillery-report.json
          lighthouse-report.json

  # 清理资源
  cleanup:
    name: 清理资源
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: 清理旧的Docker镜像
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: container
        min-versions-to-keep: 10
        delete-only-untagged-versions: true